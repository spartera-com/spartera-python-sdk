# coding: utf-8

"""
    Spartera API Documentation

    Auto-generated API documentation for REST services of the Spartera platform

    The version of the OpenAPI document: 1.24.0
    Contact: support@spartera.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spartera_api_sdk.models.companies_company_id_assets_get200_response import CompaniesCompanyIdAssetsGet200Response

class TestCompaniesCompanyIdAssetsGet200Response(unittest.TestCase):
    """CompaniesCompanyIdAssetsGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompaniesCompanyIdAssetsGet200Response:
        """Test CompaniesCompanyIdAssetsGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompaniesCompanyIdAssetsGet200Response`
        """
        model = CompaniesCompanyIdAssetsGet200Response()
        if include_optional:
            return CompaniesCompanyIdAssetsGet200Response(
                message = 'success',
                data = [
                    spartera_api_sdk.models.assets.Assets(
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        asset_id = '', 
                        user_id = '', 
                        company_id = '', 
                        connection_id = '', 
                        llm_connection_id = '', 
                        snippet_id = 56, 
                        industry_id = 56, 
                        ai_job_id = '', 
                        approval_status = '', 
                        approved_by_user_id = '', 
                        approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        slug = '', 
                        description = '', 
                        source = 'MANUAL', 
                        asset_type = 'CALCULATION', 
                        asset_schema = spartera_api_sdk.models.asset_schema.asset_schema(), 
                        visibility = 'PRIVATE', 
                        tags = '', 
                        sql_logic = '', 
                        source_schema_name = '', 
                        source_table_name = '', 
                        sell_in_marketplace = True, 
                        viz_chart_library = 'PLOTLY', 
                        viz_chart_type = 'LINE', 
                        viz_dep_var_col_name = '', 
                        viz_indep_var_col_name = '', 
                        viz_size_col_name = '', 
                        viz_color_col_name = '', 
                        viz_data_aggregation = 'No Aggregation', 
                        viz_sort_direction = 'No Sorting', 
                        viz_data_limit = 56, 
                        viz_color_scheme = 'Default', 
                        allow_params = True, 
                        accept_terms = True, 
                        cached = True, 
                        schedule = '', 
                        next_run = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_time_period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_time_period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        geographic_coverage_type = 'GLOBAL', 
                        geographic_coverage_details = '', 
                        data_source_refresh_frequency = 'REAL_TIME', 
                        data_source_last_refreshed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return CompaniesCompanyIdAssetsGet200Response(
                message = 'success',
                data = [
                    spartera_api_sdk.models.assets.Assets(
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        asset_id = '', 
                        user_id = '', 
                        company_id = '', 
                        connection_id = '', 
                        llm_connection_id = '', 
                        snippet_id = 56, 
                        industry_id = 56, 
                        ai_job_id = '', 
                        approval_status = '', 
                        approved_by_user_id = '', 
                        approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        slug = '', 
                        description = '', 
                        source = 'MANUAL', 
                        asset_type = 'CALCULATION', 
                        asset_schema = spartera_api_sdk.models.asset_schema.asset_schema(), 
                        visibility = 'PRIVATE', 
                        tags = '', 
                        sql_logic = '', 
                        source_schema_name = '', 
                        source_table_name = '', 
                        sell_in_marketplace = True, 
                        viz_chart_library = 'PLOTLY', 
                        viz_chart_type = 'LINE', 
                        viz_dep_var_col_name = '', 
                        viz_indep_var_col_name = '', 
                        viz_size_col_name = '', 
                        viz_color_col_name = '', 
                        viz_data_aggregation = 'No Aggregation', 
                        viz_sort_direction = 'No Sorting', 
                        viz_data_limit = 56, 
                        viz_color_scheme = 'Default', 
                        allow_params = True, 
                        accept_terms = True, 
                        cached = True, 
                        schedule = '', 
                        next_run = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_time_period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_time_period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        geographic_coverage_type = 'GLOBAL', 
                        geographic_coverage_details = '', 
                        data_source_refresh_frequency = 'REAL_TIME', 
                        data_source_last_refreshed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )
        """

    def testCompaniesCompanyIdAssetsGet200Response(self):
        """Test CompaniesCompanyIdAssetsGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
